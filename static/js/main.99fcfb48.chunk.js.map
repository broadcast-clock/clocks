{"version":3,"sources":["createClockString.js","App.js","useInterval.js","createTimeString.js","serviceWorker.js","index.js"],"names":["padTimeDigit","digit","splitDateToHMS","date","hours","getHours","minutes","getMinutes","seconds","getSeconds","ReactGA","initialize","pageview","App","Date","_useState","useState","_useState2","Object","slicedToArray","time","setTime","_useState3","_useState4","timeParts","setTimeParts","_useState5","_useState6","progress","setProgress","_useState7","_useState8","clockString","setClockString","_useState9","_useState10","timeString","setTimeString","_useState11","_useState12","warning","setWarning","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","hour","minute","second","prefix","concat","createTimeString","h","m","s","meridiem","createClockString","calculateWarningState","react_default","a","createElement","className","es","percent","strokeLinecap","strokeWidth","trailColor","strokeColor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99fcfb48.chunk.js","sourcesContent":["// Based on https://codepen.io/afarrar/pen/JRaEjP\n\nexport default function createClockString(timeParts){\n\n  var h = timeParts.hours;\n  var m = timeParts.minutes;\n  var s = timeParts.seconds;\n  var meridiem = \"AM\";\n\n  if(h === 0){\n      h = 12;\n  }\n\n  if(h > 12){\n      h = h - 12;\n      meridiem = \"PM\";\n  }\n\n  return `${padTimeDigit(h)}:${padTimeDigit(m)}:${padTimeDigit(s)} ${meridiem}`;\n}\n\nfunction padTimeDigit(digit){\n  return (digit < 10) ? \"0\" + digit : digit;\n}\n","import React, { useState, useEffect } from 'react';\nimport useInterval from './useInterval';\nimport { Line } from 'rc-progress';\nimport createTimeString from './createTimeString';\nimport createClockString from './createClockString';\n\nimport ReactGA from 'react-ga';\nReactGA.initialize('UA-145382333-1');\nReactGA.pageview('/');\n\nfunction App() {\n  let date = new Date();\n  const [time, setTime] = useState(date);\n  const [timeParts, setTimeParts] = useState(splitDateToHMS(date));\n  const [progress, setProgress] = useState(0)\n  const [clockString, setClockString] = useState('Starting...');\n  const [timeString, setTimeString] = useState('Starting...');\n  const [warning, setWarning] = useState(false);\n\n  useInterval(() => {\n    let date = new Date();\n    setTime(date);\n    setTimeParts(splitDateToHMS(date))\n  }, 1000);\n\n  useEffect(() => {\n    setTimeString(createTimeString(timeParts))\n    setClockString(createClockString(timeParts))\n    // +1 here to get the percentage to 100.\n    setProgress(calcuatePercentateFromSeconds(timeParts.seconds));\n    setWarning(calculateWarningState(timeParts));\n  },[time, timeParts]);\n\n\n  return (\n    <div className=\"container\">\n      <div className=\"time-string\">\n        {timeString}\n      </div>\n      <div className=\"line-container\">\n        <Line\n          percent={progress}\n          strokeLinecap =\"butt\"\n          strokeWidth=\"8\"\n          trailColor=\"#eee\"\n          strokeColor={warning ? 'red' : '#666'}\n        />\n      </div>\n      <div className=\"clock-string\">\n        {clockString}\n      </div>\n    </div>\n  );\n}\n\nfunction calcuatePercentateFromSeconds(seconds){\n  return (seconds === 0) ? 100 : seconds/60*100\n}\n\nfunction calculateWarningState(timeParts){\n   if((timeParts.minutes === 59) && (timeParts.seconds > 49)){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n\nfunction splitDateToHMS(date){\n  return {\n    hours: date.getHours(),\n    minutes: date.getMinutes(),\n    seconds: date.getSeconds()\n  }\n}\n\n\nexport default App;\n","// Credit: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from 'react';\n\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","\nexport default function createTimeString(timeParts) {\n  var hour   = timeParts.hours;\n  var minute = timeParts.minutes;\n  var second = timeParts.seconds;\n  var prefix = ' ';\n\n  if(second > 30) {\n    // comming up to next minute\n    // so bump the display minute\n    prefix = '-'\n    minute = minute + 1;\n  }\n  else {\n    prefix = '+'\n  }\n\n  if(minute > 30) {\n    // X minutes to next hour\n    // so bump the display hour to the next hour\n    hour = hour + 1;\n  }\n\n  if(hour === 0) {\n    hour = 12;\n  }\n\n  if(hour > 12) {\n    hour = hour - 12;\n  }\n\n  switch(minute){\n    case 0:\n    return `${prefix} ${hour} O'Clock`;\n\n    case 1:\n    return `${prefix} ${minute} minute past ${hour}`;\n\n    case 15:\n    return `${prefix} Quarter past ${hour}`;\n\n    case 30:\n    return `${prefix} Half past ${hour}`;\n\n    case 45:\n    return `${prefix} Quarter to ${hour}`;\n\n    case 59:\n    case 60:\n    /*\n      case 60 is when we get past 30 seconds to the hour\n      we override the default behaviour (past/to) in the last minute\n      by checking the minute passed in.\n    */\n\n    if(timeParts.minutes === 59){\n      return `${(60 - second)} seconds to ${hour}`;\n    }\n    else {\n      return `${prefix} ${60-minute} minute to ${hour}`;\n    }\n\n    default:\n    if(minute < 31){\n      return `${prefix} ${minute} minutes past ${hour}`;\n    }\n    else {\n      return `${prefix} ${60-minute} minutes to ${hour}`;\n    }\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}