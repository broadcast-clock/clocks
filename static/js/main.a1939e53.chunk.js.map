{"version":3,"sources":["createTimeString.js","createClockString.js","App.js","useInterval.js","serviceWorker.js","index.js"],"names":["checkTime","timeParts","hours","minutes","seconds","padTimeDigit","digit","splitDateToHMS","date","getHours","getMinutes","getSeconds","App","Date","_useState","useState","_useState2","Object","slicedToArray","time","setTime","_useState3","_useState4","setTimeParts","_useState5","_useState6","progress","setProgress","_useState7","_useState8","clockString","setClockString","_useState9","_useState10","timeString","setTimeString","_useState11","_useState12","warning","setWarning","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","hour","minute","second","prefix","actualMinute","concat","calculateMessage","createTimeString","h","m","s","meridiem","createClockString","calculateWarningState","react_default","a","createElement","className","es","percent","strokeLinecap","strokeWidth","trailColor","strokeColor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1939e53.chunk.js","sourcesContent":["\nexport default function createTimeString(timeParts) {\n\n  if(checkTime(timeParts, 0, 0, 0)){\n    return \"Midnight\";\n  }\n\n  if(checkTime(timeParts, 12, 0, 0)){\n    return \"Midday\";\n  }\n\n  return calculateMessage(timeParts);\n\n}\n\nfunction calculateMessage(timeParts) {\n  var hour   = timeParts.hours;\n  var minute = timeParts.minutes;\n  var second = timeParts.seconds;\n  var prefix = ' ';\n\n  const actualMinute = minute;\n\n  if(second > 30) {\n    // comming up to next minute\n    // so bump the display minute\n    prefix = '-'\n    minute = minute + 1;\n  }\n  else {\n    prefix = '+'\n  }\n\n  if(minute > 30) {\n    // X minutes to next hour\n    // so bump the display hour\n    hour = hour + 1;\n  }\n  else {\n    // the hour is normal\n    if(hour === 0) {\n      hour = 12;\n    }\n  }\n\n  if(hour > 12) {\n    hour = hour - 12;\n  }\n\n  switch(minute){\n    case 0:\n    return `${prefix} ${hour} O'Clock`;\n\n    case 1:\n    return `${prefix} ${minute} minute to ${hour}`;\n\n    case 15:\n    return `${prefix} Quarter past ${hour}`;\n\n    case 30:\n    return `${prefix} Half past ${hour}`;\n\n    case 45:\n    return `${prefix} Quarter to ${hour}`;\n\n    case 59:\n    case 60:\n    // case 60 is when we get past 30 seconds to the hour\n    // We override the default behaviour (past/to) in the last minute by checking the actualMinute.\n\n    if(actualMinute === 59){\n      return `${(60 - second)} seconds to ${hour}`;\n    }\n    else {\n      return `${prefix} ${60-minute} minute to ${hour}`;\n    }\n\n    default:\n    if(minute < 31){\n      return `${prefix} ${minute} minutes past ${hour}`;\n    }\n    else {\n      return `${prefix} ${60-minute} minutes to ${hour}`;\n    }\n  }\n}\n\nfunction checkTime(timeParts, hours, minutes, seconds){\n  return (\n    timeParts.hours === hours &&\n    timeParts.minutes === minutes &&\n    timeParts.seconds === seconds) ? true : false;\n}\n","// Based on https://codepen.io/afarrar/pen/JRaEjP\n\nexport default function createClockString(timeParts){\n\n  var h = timeParts.hours;\n  var m = timeParts.minutes;\n  var s = timeParts.seconds;\n  var meridiem = \"AM\";\n\n  if(h === 0){\n      h = 12;\n  }\n\n  if(h > 12){\n      h = h - 12;\n      meridiem = \"PM\";\n  }\n\n  return `${padTimeDigit(h)}:${padTimeDigit(m)}:${padTimeDigit(s)} ${meridiem}`;\n}\n\nfunction padTimeDigit(digit){\n  return (digit < 10) ? \"0\" + digit : digit;\n}\n","import React, { useState, useEffect } from 'react';\nimport useInterval from './useInterval';\nimport { Line } from 'rc-progress';\nimport createTimeString from './createTimeString';\nimport createClockString from './createClockString';\n\nfunction App() {\n  let date = new Date();\n  const [time, setTime] = useState(date);\n  const [timeParts, setTimeParts] = useState(splitDateToHMS(date));\n  const [progress, setProgress] = useState(0)\n  const [clockString, setClockString] = useState('Starting...');\n  const [timeString, setTimeString] = useState('Starting...');\n  const [warning, setWarning] = useState(false);\n\n  useInterval(() => {\n    let date = new Date();\n    setTime(date);\n    setTimeParts(splitDateToHMS(date))\n  }, 1000);\n\n  useEffect(() => {\n    setTimeString(createTimeString(timeParts))\n    setClockString(createClockString(timeParts))\n    // +1 here to get the percentage to 100.\n    setProgress(calcuatePercentateFromSeconds(timeParts.seconds));\n    setWarning(calculateWarningState(timeParts));\n  },[time, timeParts]);\n\n\n  return (\n    <div className=\"container\">\n      <div className=\"time-string\">\n        {timeString}\n      </div>\n      <div className=\"line-container\">\n        <Line\n          percent={progress}\n          strokeLinecap =\"butt\"\n          strokeWidth=\"8\"\n          trailColor=\"#eee\"\n          strokeColor={warning ? 'red' : '#666'}\n        />\n      </div>\n      <div className=\"clock-string\">\n        {clockString}\n      </div>\n    </div>\n  );\n}\n\nfunction calcuatePercentateFromSeconds(seconds){\n  return (seconds === 0) ? 100 : seconds/60*100\n}\n\nfunction calculateWarningState(timeParts){\n   if((timeParts.minutes === 59) && (timeParts.seconds > 49)){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n\nfunction splitDateToHMS(date){\n  return {\n    hours: date.getHours(),\n    minutes: date.getMinutes(),\n    seconds: date.getSeconds()\n  }\n}\n\n\nexport default App;\n","// Credit: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from 'react';\n\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}