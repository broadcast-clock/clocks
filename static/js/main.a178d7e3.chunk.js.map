{"version":3,"sources":["createClockString.js","App.js","useInterval.js","createTimeString.js","serviceWorker.js","index.js"],"names":["padTimeDigit","digit","splitDateToHMS","date","hours","getHours","minutes","getMinutes","seconds","getSeconds","ReactGA","initialize","pageview","App","Date","_useState","useState","_useState2","Object","slicedToArray","timeParts","setTimeParts","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","timeString","hour","minute","second","prefix","concat","createTimeString","progress","clockString","h","m","s","meridiem","createClockString","warning","calculateWarningState","react_default","a","createElement","className","es","percent","strokeLinecap","strokeWidth","trailColor","strokeColor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a178d7e3.chunk.js","sourcesContent":["// Based on https://codepen.io/afarrar/pen/JRaEjP\n\nexport default function createClockString(timeParts) {\n  var h = timeParts.hours;\n  var m = timeParts.minutes;\n  var s = timeParts.seconds;\n  var meridiem = \"AM\";\n\n  if (h === 0) {\n    h = 12;\n  }\n\n  if (h > 12) {\n    h = h - 12;\n    meridiem = \"PM\";\n  }\n\n  return `${padTimeDigit(h)}:${padTimeDigit(m)}:${padTimeDigit(s)} ${meridiem}`;\n}\n\nfunction padTimeDigit(digit) {\n  return digit < 10 ? \"0\" + digit : digit;\n}\n","import React, { useState, useEffect } from \"react\";\nimport useInterval from \"./useInterval\";\nimport { Line } from \"rc-progress\";\nimport createTimeString from \"./createTimeString\";\nimport createClockString from \"./createClockString\";\n\nimport ReactGA from \"react-ga\";\nReactGA.initialize(\"UA-145382333-1\");\nReactGA.pageview(\"/\");\n\nfunction App() {\n  let date = new Date();\n  const [timeParts, setTimeParts] = useState(splitDateToHMS(date));\n\n  useInterval(() => {\n    let date = new Date();\n    setTimeParts(splitDateToHMS(date));\n  }, 1000);\n\n  var timeString = createTimeString(timeParts);\n  var progress = calcuatePercentateFromSeconds(timeParts.seconds);\n  var clockString = createClockString(timeParts);\n  var warning = calculateWarningState(timeParts);\n\n  return (\n    <div className=\"outer-wrapper\">\n      <div className=\"wrapper\">\n        <div className=\"container\">\n          <div className=\"time-string\">{timeString}</div>\n          <div className=\"line-container\">\n            <Line\n              percent={progress}\n              strokeLinecap=\"butt\"\n              strokeWidth=\"8\"\n              trailColor=\"#eee\"\n              strokeColor={warning ? \"red\" : \"#666\"}\n            />\n          </div>\n          <div className=\"clock-string\">{clockString}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction calcuatePercentateFromSeconds(seconds) {\n  return seconds === 0 ? 100 : (seconds / 60) * 100;\n}\n\nfunction calculateWarningState(timeParts) {\n  if (timeParts.minutes === 59 && timeParts.seconds > 49) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction splitDateToHMS(date) {\n  return {\n    hours: date.getHours(),\n    minutes: date.getMinutes(),\n    seconds: date.getSeconds()\n  };\n}\n\nexport default App;\n","// Credit: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","export default function createTimeString(timeParts) {\n  var hour = timeParts.hours;\n  var minute = timeParts.minutes;\n  var second = timeParts.seconds;\n  var prefix = \" \";\n\n  if (second > 30) {\n    // comming up to next minute\n    // so bump the display minute\n\n    // This is a minus sign, NOT a hyphen\n    // We use to ensure the following string does not move left/right\n    // when the sign chnges on the half minute.\n    prefix = \"âˆ’\";\n    minute = minute + 1;\n  } else {\n    prefix = \"+\";\n  }\n\n  if (minute > 30) {\n    // X minutes to next hour\n    // so bump the display hour to the next hour\n    hour = hour + 1;\n  }\n\n  if (hour === 0) {\n    hour = 12;\n  }\n\n  if (hour > 12) {\n    hour = hour - 12;\n  }\n\n  switch (minute) {\n    case 0:\n      return `${prefix} ${hour} O'Clock`;\n\n    case 1:\n      return `${prefix} ${minute} minute past ${hour}`;\n\n    case 15:\n      return `${prefix} Quarter past ${hour}`;\n\n    case 30:\n      return `${prefix} Half past ${hour}`;\n\n    case 45:\n      return `${prefix} Quarter to ${hour}`;\n\n    case 59:\n    case 60:\n      /*\n      case 60 is when we get past 30 seconds to the hour\n      we override the default behaviour (past/to) in the last minute\n      by checking the minute passed in.\n    */\n\n      if (timeParts.minutes === 59) {\n        return `${60 - second} seconds to ${hour}`;\n      } else {\n        return `${prefix} ${60 - minute} minute to ${hour}`;\n      }\n\n    default:\n      if (minute < 31) {\n        return `${prefix} ${minute} minutes past ${hour}`;\n      } else {\n        return `${prefix} ${60 - minute} minutes to ${hour}`;\n      }\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}